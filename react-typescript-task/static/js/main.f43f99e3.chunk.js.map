{"version":3,"sources":["utils.ts","data/vehicles/contracts.ts","data/vehicles/mock.ts","data/vehicles/api.ts","components/VehicleTypeSelect.tsx","components/Filter.tsx","components/Table.tsx","App.tsx","index.tsx"],"names":["getRandomElement","array","Math","floor","random","length","round","value","fractionDigits","multiplier","pow","Number","EPSILON","VehicleType","vehicleTypes","sedan","hatchback","roadster","coupe","minivan","vehicleTypeTitles","marks","titles","vehicle","Array","from","map","_","i","start","end","title","type","id","toString","price","VehicleApi","filter","x","search","items","Select","SEP","VehicleTypeSelect","onChange","onValueChange","Filter","setVehicles","useState","selectedVehicleType","setSelectedVehicleType","searchValue","setSearchValue","name","onSubmit","event","preventDefault","Gapped","gap","Input","placeholder","target","newType","Button","TableItem","number","CurrencyLabel","Table","vehicles","key","colSpan","align","initialFilter","App","useEffect","data","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.f43f99e3.chunk.js","sourcesContent":["export function getRandomElement<T>(array: T[]): T {\n    return array[Math.floor(Math.random() * array.length)];\n}\n\nexport function getRandomDigit(start: number, end: number): number {\n    return Math.random() * (end - start) + start;\n}\n\nexport function round(value: number, fractionDigits = 2): number {\n    const multiplier = Math.pow(10, fractionDigits);\n    return Math.round((value + Number.EPSILON) * multiplier) / multiplier;\n}\n","export enum VehicleType {\n    sedan,\n    hatchback,\n    roadster,\n    coupe,\n    minivan\n}\n\nexport const vehicleTypes: VehicleType[] = [\n    VehicleType.sedan,\n    VehicleType.hatchback,\n    VehicleType.roadster,\n    VehicleType.coupe,\n    VehicleType.minivan\n];\n\nexport const vehicleTypeTitles: Record<VehicleType, string> = {\n    [VehicleType.sedan]: \"Седан\",\n    [VehicleType.hatchback]: \"Хэтчбэк\",\n    [VehicleType.roadster]: \"Роадстер\",\n    [VehicleType.coupe]: \"Купэ\",\n    [VehicleType.minivan]: \"Минивэн\"\n};\n\nexport interface Vehicle {\n    id: string;\n    type: VehicleType;\n    title: string;\n    price: number;\n}\n\nexport interface VehicleFilter {\n    title: string;\n    type: VehicleType | null;\n}\n","import {getRandomDigit, getRandomElement, round} from \"../../utils\";\nimport {Vehicle, vehicleTypes} from \"./contracts\";\n\nconst marks: string[] = [\n    \"BMW\",\n    \"Lada\",\n    \"Jeep\",\n    \"KIA\",\n    \"Subaru\",\n    \"Toyota\",\n    \"Volkswagen\"\n];\n\nconst titles: string[] = [\n    \"M3\",\n    \"M5\",\n    \"Granta\",\n    \"Kalina\",\n    \"Polo\",\n    \"Grand Cherokee\",\n    \"Rio\",\n    \"Spectra\",\n    \"Impreza\",\n    \"BRZ\",\n    \"Corolla\",\n    \"Golf\",\n    \"Camry\"\n];\n\nexport function generateVehicle(length: number): Vehicle[] {\n    return Array.from({length}).map((_, i) => {\n        const title = `${getRandomElement(marks)} ${getRandomElement(titles)}`;\n        const type = getRandomElement(vehicleTypes);\n        return {\n            id: i.toString(),\n            title,\n            type,\n            price: round(getRandomDigit(10_000, 5_000_000))\n        };\n    });\n}\n","import {generateVehicle} from \"./mock\";\nimport {Vehicle, VehicleFilter} from \"./contracts\";\n\nconst vehicle = generateVehicle(15);\n\nexport class VehicleApi {\n    static search({type, title}: VehicleFilter): Vehicle[] {\n        return vehicle.filter(x => (type == null || x.type === type) && x.title.search(title) !== -1);\n    }\n}\n","import React from \"react\";\nimport {VehicleType, vehicleTypes, vehicleTypeTitles} from \"../data/vehicles/contracts\";\nimport {Select} from \"@skbkontur/react-ui\";\n\nexport interface VehicleTypeSelectProps {\n    value: VehicleType | null;\n    onChange: (value: VehicleType | null) => void;\n}\n\nconst items: Array<[VehicleType, string]> = [\n    [-1 as VehicleType, \"Все\"],\n    Select.SEP() as any,\n    ...vehicleTypes.map<[VehicleType, string]>(x => [x, vehicleTypeTitles[x]])\n];\n\nexport const VehicleTypeSelect: React.FC<VehicleTypeSelectProps> = ({value, onChange}) => {\n    return (\n        <Select\n            items={items}\n            value={value != null ? value : (-1 as VehicleType)}\n            onValueChange={(x: any) => onChange(x === -1 ? null : x)}\n        />\n    );\n};\n","import React, { ChangeEvent, useState, Dispatch } from \"react\";\nimport { VehicleTypeSelect } from \"./VehicleTypeSelect\";\nimport { VehicleType, Vehicle } from \"../data/vehicles/contracts\";\nimport { VehicleApi } from \"../data/vehicles/api\";\nimport { Input, Button, Gapped } from \"@skbkontur/react-ui\";\n\ninterface IFilter {\n    setVehicles: Dispatch<Vehicle[]>;\n}\n\nexport const Filter: React.FC<IFilter> = ({ setVehicles }) => {\n    const [selectedVehicleType, setSelectedVehicleType] = useState<VehicleType | null>(null);\n    const [searchValue, setSearchValue] = useState<string>('');\n\n    const handleVehicleTypeChange = (newType: VehicleType | null) => {\n        setSelectedVehicleType(newType);\n        setVehicles(VehicleApi.search({title: searchValue, type: newType}));\n    };\n\n    const handleSearchValueChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n        setSearchValue(value);\n        setVehicles(VehicleApi.search({title: value, type: selectedVehicleType}));\n    };\n\n    const hadnleSubmit = (event: ChangeEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        setVehicles(VehicleApi.search({title: searchValue, type: selectedVehicleType}));\n    };\n\n    return (\n        <form name=\"form-search\" onSubmit={hadnleSubmit}>\n            <Gapped gap={5}>\n                <Input name=\"search\" placeholder=\"Поиск\" onChange={handleSearchValueChange} value={searchValue} />\n                <VehicleTypeSelect value={selectedVehicleType} onChange={handleVehicleTypeChange} />\n                <Button type=\"submit\">Search</Button>\n            </Gapped>\n        </form>\n    );\n};\n","import React from \"react\";\nimport { CurrencyLabel } from \"@skbkontur/react-ui\";\nimport { Vehicle, vehicleTypeTitles } from \"../data/vehicles/contracts\";\n\ninterface ITableItemProps {\n    vehicle: Vehicle;\n    number: number;\n}\n\ninterface ITableItemsProps {\n    vehicles: Vehicle[];\n}\n\nconst TableItem: React.FC<ITableItemProps> = ({ vehicle, number }) => {\n    return (\n        <tr>\n            <td>{number}</td>\n            <td>{vehicle.title}</td>\n            <td>\n                <CurrencyLabel value={vehicle.price} fractionDigits={2} />\n            </td>\n            <td>{vehicleTypeTitles[vehicle.type]}</td>\n        </tr>\n    );\n};\n\nexport const Table: React.FC<ITableItemsProps> = ({ vehicles }) => {\n    return (\n        <table>\n            <thead>\n            <tr>\n                <th>#</th>\n                <th>Название</th>\n                <th>Цена, ₽</th>\n                <th>Тип ТС</th>\n            </tr>\n            </thead>\n            <tbody>\n            {vehicles.length > 0 ? (\n                vehicles.map((x, i) => (\n                    <TableItem key={x.id} number={i + 1} vehicle={x} />\n                ))\n                )\n                :\n                <tr>\n                    <td colSpan={4} align=\"center\">Нет результатов поиска</td>\n                </tr>\n            }\n            </tbody>\n        </table>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Vehicle, VehicleFilter } from \"./data/vehicles/contracts\";\nimport { VehicleApi } from \"./data/vehicles/api\";\nimport { Filter } from \"./components/Filter\";\nimport { Table } from \"./components/Table\";\n\nconst initialFilter: VehicleFilter = {\n    title: \"\",\n    type: null\n};\n\nexport default function App() {\n    const [vehicles, setVehicles] = useState<Vehicle[]>([]);\n\n    useEffect(() => {\n        const data = VehicleApi.search(initialFilter);\n        setVehicles(data);\n    }, []);\n\n    return (\n        <>\n            <Filter setVehicles={setVehicles} />\n            <Table vehicles={vehicles} />\n        </>\n    );\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}